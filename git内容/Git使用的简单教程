安装Git(找资料很简单)
创建版本仓库(repository)
mkdir learngit
进入版本库目录
cd learngit
初始化版本库
git init 会多出一个隐藏文件  .git
提交一个/多个 文件到版本库中（两步）
git add 文件名1 文件名2
git commit -m 提交说明    （-m参数后接此次提交内容的说明信息）
git版本回退和回退后再前进：
查看版本历史记录：
git log		可以添加参数更简洁的显示（--pretty=oneline）
返回当前版本的上一个版本：
git reset --hard HEAD^
上上个版本：
git reset --hard HEAD^^
退回前100个版本：
git reset --hard HEAD~100
回到未来某个版本：
git reset --hard [commit_id]
历史命令：
git reflog
查看git状态：
git status
Git提交分为三个区域，分别是工作区，暂存区，分支，我们进行git add操作时是把工作区的内容提交到暂存区，然后进行git commit操作时把暂存区的内容提交到分支中去，这样暂存区的内容也就为空了，假如对一个文件进行第一次修改，然后只执行add不执行commit操作，再进行第二次对该文件进行修改，然后最后commit提交，在这样的情况下只会提交第一次修改，不会提交第二次修改，因为commit提交是把暂存区的内容提交到分支中去的。
丢弃工作区的修改或者将暂存区内容退回到add前的状态：
git checkout -- 文件
将暂存区的的修改退回到工作区：
git reset HEAD 文件
删除文件：
当我们commit一个文件到git分支的时候，后期把该文件从工作区中删除了，如果是确实要进行删除，那分支中还存在该文件，而工作区中不存在该文件则产生差别，所以要把分支中的该文件也进行删除使用 git rm 文件名  并可以commit一下说明
如果是误删，则可以从分支上恢复到工作区  git checkout -- 文件
添加远程库：
首先在github上拥有账号并创建一个版本库（repository），会有提示的命令
在对应工作区中执行：
git remote add origin git@github.com:helloxiaoputi/myRepository.git
上面命令如果执行错误可通过执行命令：
git remote rm origin
然后在执行命令提交到远程github上
git push -u origin master
上面的执行如果报Perssion denied(publickey)错误则是ssh的公钥引起的，需要在github上将Linux中的ssh公钥放入，Linux上的ssh公钥位置一般是在/root/.ssh/id_rsa.pub中（如果不存在该文件则执行ssh-keygen命令会创建该文件）
后期只要修改了文件并同步到github上时只要执行：
git push origin master就可以了
将github上的远程库克隆到自己的电脑上：
首先还是创建一个可被克隆的仓库，然后进入这个仓库在clone or download下存在ssh地址，使用命令：
git clone git@github.com:helloxiaoputi/myRepository.git可以把该库克隆到自己的电脑上
创建与合并分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
当分支还没被合并时候删除会报错，强制删除：git branch -D <name>
删除远程上的分支(删除远程上的lin这个分支)	  git push origin :lin
合并分支前的步骤操作应该是：先创建一个分支，对分支文件里面的内容进行编辑，并使用add和commit，然后切换回master分支，进行git merge 刚才修改的分支，最后删除分支
bug分支操作：
情况：当遇到在一个分支上操作文件时候，突然另一边出现一个bug需要马上修复，这个时候必须停下当前当前分支先修复一下bug，该怎么操作呢？只能把当前分支上的工作区先存储起来使用(git stash)，然后创建分支进行操作bug修复
git branch bug01
git checkout bug01 
进行修复并合并
查看所有隐藏起来的分支	git stash list
还原刚才隐藏起来的工作区 	git stash apply stash@{0} 并继续操作
多人协作操作：
查看远程库信息：git remote -v
本地新建的分支如果不推送到远程，其他人是不可见的
从本地推送分支，使用git push origin <分支名称>，如果推送失败，先用git pull抓取远程的最新提交
从本地创建和远程一致的分支 git checkout -b <分支名称> origin/<分支名称>
建立本地分支和远程分支的关联git branch --set-upstream <分支> origin/<分支>
从远程抓取分支，使用git pull，如果有冲突要先处理冲突
















