1.  脚本使用中文字符utf-8
    # -*- coding: UTF-8 -*-
2.  python变量
    a=1
    a,b = [],[]
3.  查看变量类型
    print type(变量名)
4.  删除对应的变量
    del 变量名
5.  字符串拼接和字符串复制  str = 'Hello,World!'
    str + 'pingjie'    拼接
    str * 2            复制
6.  获取指定变量中的字符串
    str = 'ilovepython'
    print str[1:5]
7.  获取列表中的几项
    list = ['runoob',786,2.23,'john',70.2]
    list[1:3]   list[2:]
8.  字典定义、赋值、获取键、键值
    1.  dict = {} 
    2.  dict[key] = 'this is two'
    3.  dict.get('name','默认值')  如果name键不存在则返回默认值
    3.  tinydict = {'name':'john','code':'6743','dept':'salts'}
        tinydict.keys()     获取所有键  ：['dept', 'code', 'name']
        tinydict.values()   获取所有值  ：['salts', '6743', 'john']
9.  判断变量是不是指定的类型
    a=1
    print isinstance(a,int)     返回true或false
10. 算数运算符：
    +，-，*，/，%  用法与PHP一致
    x**y :表示x的y次幂
    9//2:表示取整数,结果为4
11. 比较运算符：
    ==，!=，<>，>，<，>=，<=  用法与PHP一致
12. 赋值运算符：
    =，+=，-=，*=，/=，%=，**=，//=   用法与php一致。
13. 逻辑运算符：
    and，or，not 用法与php的&&，||，！一致。
14. 成员运算符：
    in，not in
15. 身份运算符：
    is，is not    （值和类型必须一致）相当于php中的  ===  和  !==
    例子：
    a,b=20,20
    if(a is b):
        print '==='
    b=float(20)
    if(a is not b):
        print '!=='
16. 条件语句：
    if 条件: 
        代码块 
    elif 条件：
        代码块
    else:
        代码块
17. 循环语句：
    count = 0
    while (count < 9):
        print 'The count is:', count
        count = count + 1
18. while循环两个重要命令continue和break
    continue    break
19. while ... else ... 语句：当while后的条件不满足时执行else后的代码块
    while 条件 :
         代码块
    else:
        代码块 
20. for循环
    遍历字符串：
    for letter in 'Python'
        print letter
    遍历列表
    lists = ['marry','adam','kitty']
    for name in lists:
        print name
21. 使用索引遍历
    fruits = ['banana','apple','mango']
    for index in range(len(fruits)):
        print fruits[index]
22. 返回序列长度 
    len()   
23. 返回一个序列的数也就是多个下标
    range()
24. 日期和时间（一）：   import time
    1.  time挂起的时间  time.sleep()   
    2.  输出当前时间戳   time.time()    
    3.  输出格式2017-12-03 15:50:29  time.strftime("%Y-%m-%d %H:%M:%S",time.localtime()) 
    4.  根据不同格式转为时间戳         
        a = "Mar 28 2016"
        print time.mktime(time.strptime(a,'%b %d %Y'))
25. 日期和时间（二）：   import datetime
    1.  获取今天的日期     today = datetime.date.today()
    2.  获取一天的时间差    distance = datetime.timedelta(days=1)
    3.  获取昨天的日期     yesterday = today - distance
26. 函数
    1.  格式
        def fun(arg1):
            代码块
    2.  调用函数：
        fun(arg1)
27. 模块
    定义模块：模块是一个以py结尾的文件 如：support.py
    引用整个模块：在文件最开端引用模块：import support
    引用某个模块中的一个函数：from 模块名 import 函数名
    导入某个模块中的所有函数：from 模块名 import *
    文件名：  support.py
    文件内的函数：
    def print_func( par ):
       print "Hello : ", par
    引入文件：import support
    调用函数：support.print_func('lin')
28. 读取键盘输入
    raw_input()    或      input()
    两者区别：input可以输入python表达式而raw_input则不行
    输入表达式 ：[x*5 for x in range(2,10,2)] 参数1：以2开头，参数2：加上步长小于它，参数3：步长
    会输出:您输入的是：[10,20,30,40]
29. 打开和关闭文件：
    1.打开：open(文件路径，打开模式，缓存设置)
    2.打开模式(可选)：如：wb：以二进制方式打开可写入
    3.缓存设置(可选)：设为0不开启，设为1开启。大于1缓存区大小，小于1系统默认大小
    4.文件信息
        fileobj = file('foo.txt','wb')
        print "文件名:",fileobj.name
        print "文件是否已关闭:",fileobj.closed
        print "文件访问模式:",fileobj.mode
        文件关闭：fileobj.close()
    5.打开文件并在代码块执行完毕后自动调用fileobj .close()方法
        with open(...) as fileobj :
        file打开的对象还有存在的方法:
        fileobj.flush()    刷新文件内部缓存
        fileobj.isatty()    检测文件是否连接到一个终端上，如果连接上了返回true否则返回false
        fileobj.readline()  每次读取一行
        fileobj.readlines()  读取多行并按行返回list列表
        fileobj.writelines()   向文件中写入一个序列，如果需要换行可以自己加换行符号\n
30. 文件read()和write()方法：
    read()方法:read后的参数表示读取的字节数，如果不写默认全读
    fileobj = open('foo.txt','r+')
    str = fileobj.read(10)
    fileobj.close()   
    write()方法:
    fileobj = open('foo.txt','wb')
    fileobj.write("www.runoob.com!\nVery good site!\n")
    fileobj.close()
31. 文件定位：
    tell()：返回文件指针的当前位置
    seek(offset,[from]):改变指针的位置,offset表示要移动的字节数，from表示移动自己的参考位置，from设为0表示指针移动文件开头，设为1表示指针在当前位置，设为2表示指针移到文件最后。
32. 操作文件    import os
    文件重命名：os.rename('原文件名','新文件名')
    删除文件：os.remove('文件名')
    显示将要创建目录的位置：os.path.join('/data/python','testdir')
    创建目录：os.mkdir('test')
    获取当前目录：os.getcwd()
    获取当前目录的绝对路径：os.path.abspath('.')
    删除目录：os.rmdir('目录位置')
    获取系统信息：os.uname()
    获取系统定义的环境变量：os.environ
    拆分路径：os.path.split('路径')
    得到文件扩展名：os.path.splitext('文件路径')
33. 异常处理
    一旦执行了raise语句，raise后面的语句将不能执行
    格式1：(执行try中内容，出现异常名称类型的错误会对应抛出,如果无异常则执行else)
    try:
        代码块
    except [异常名称]:
        代码块
    else:
        代码块
    格式2：(try-finally语句无论是否发生异常都将执行最后的代码)
    try:
        代码块
    finally:
        代码块
    raise
    格式3：(手动抛出异常后，后面的代码块将不再执行)
        raise Exception()
        python面向对象类似php，只是改变了格式
34. 正则使用的flags
    re.I 忽略大小写
    re.L 表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境
    re.M 多行模式
    re.S 即为 . 并且包括换行符在内的任意字符（. 不包括换行符）
    re.U 表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库
    re.X 为了增加可读性，忽略空格和 # 后面的注释
34. python正则：    re
    菜鸟正则：http://www.runoob.com/python/python-reg-expressions.html
    1.  re.match(pattern, string, flags=0)  flags:是否区分大小写，多行匹配等等
        re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。
        若正则中存在括号，第一个括号匹配到的使用    matchObj.group(1)
        1.  print(re.match('www', 'www.runoob.com').span())  在起始位置匹配   返回   (0, 3)
        2.  print(re.match('com', 'www.runoob.com'))    不在起始位置匹配    返回  None
    2.  re.search(pattern, string, flags=0)
        re.search 扫描整个字符串并返回第一个成功的匹配。
        若正则中存在括号，第一个括号匹配到的使用    matchObj.group(1)
        print(re.search('www', 'www.runoob.com').span())   在起始位置匹配  返回  (0, 3)
        print(re.search('com', 'www.runoob.com').span())   不在起始位置匹配    返回  (11, 14)
    3.  re.sub(pattern, repl, string, count=0, flags=0)
        repl : 替换的字符串，也可为一个函数。
        string : 要被查找替换的原始字符串。
        count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。
        phone = "2004-959-559 # 这是一个国外电话号码"
        # 删除字符串中的 Python注释
        num = re.sub(r'#.*$', "", phone)
        print "电话号码是: ", num
        # 删除非数字(-)的字符串 
        num = re.sub(r'\D', "", phone)
        print "电话号码是 : ", num
    4.  re.compile(pattern[, flags])
        re.compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。
        pattern = re.compile(r'\d+')
        m = pattern.match('one12twothree34four')
    5.  findall(string[, pos[, endpos]])
        pattern = re.compile(r'\d+')   # 查找数字
        result1 = pattern.findall('runoob 123 google 456')      返回  ['123', '456']
        result2 = pattern.findall('run88oob123google456', 0, 10)    返回  ['88', '12']
    6.  re.finditer(pattern, string, flags=0)
        it = re.finditer(r"\d+","12a32bc43jf3")     返回迭代需要使用循环输出
        for match in it: 
            print (match.group() )
    7.  re.split(pattern, string[, maxsplit=0, flags=0])    等待进一步研究

35. 向内存中存取字符串：StringIO():
    from io import StringIO
    strobj = StringIO('aaaaaa')
    print strobj.readline()
    如果不是字符串操作二进制数据则使用BytesIO()
    from io import BytesIO
    byteobj = BytesIO()
    byteobj.write('你好世界'.encode('utf-8'))
    print (f.getvalues())
    序列化：我们把变量从内存中变成可存储或传输的过程称之为序列化
    python使用pickle模块来实现序列化
    序列化：dump()
    import pickle
    dict={'name':'bill','age':24,'score':88}  
    f=open('test.txt','wb')
    pickle.dump(dict,f)
    反序列化：load()
36. json操作
    import json
    d={'name':'bill','age':24,'score':88} 
    print json.dumps(d)
    json字符串变成一个python对象
    json.loads(json字符串)
    python也可以将一个实例对象转换为json对象（比较麻烦）例子：
    class Student(object):
        def __init__(self, name, age, score):
            self.name = name
            self.age = age
            self.score = score
    def student2dict(std):
        return {'name': std.name,'age': std.age,'score': std.score }
    s = Student('Bob', 20, 88)
print(json.dumps(s,default=student2dict))
37. 单进程：
    from multiprocessing import Process
    import os
    # 子进程要执行的代码
    def run_proc(name):
        print('Run child process %s (%s)...' % (name, os.getpid()))
    if __name__=='__main__':   
    #表示如果__name__等于自己的话就执行，默认自己是__main__
        print('Parent process %s.' % os.getpid())
        p = Process(target=run_proc, args=('test',))
        print('Child process will start.')
        p.start()
        p.join()
        print('Child process end.')
38. 多进程：引入模块Pool使用进程池
    from multiprocessing import Pool
    import random,time,os
    def long_time_task(name):
        print('Run task %s (%s)...' % (name, os.getpid()))
        start = time.time()
        time.sleep(random.random() * 3)
        end = time.time()
        print('Task %s runs %0.2f seconds.' % (name, (end - start)))
    if __name__=='__main__':
        print('Parent process %s.' % os.getpid())      #父进程id
        p = Pool(4)    #进程池一次性执行4个进程
        for i in range(5):
            p.apply_async(long_time_task, args=(i,))    
    #使用apply_async(方法名,参数)从进程池中调用子进程来执行
        print('Waiting for all subprocesses done...')
        p.close()
        p.join()   #子进程都结束了执行后面的内容，使用join()方法前面必须加上close()方法
        print('All subprocesses done.')






































